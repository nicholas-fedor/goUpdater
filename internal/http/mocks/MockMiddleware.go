// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMiddleware creates a new instance of MockMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMiddleware {
	mock := &MockMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMiddleware is an autogenerated mock type for the Middleware type
type MockMiddleware struct {
	mock.Mock
}

type MockMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMiddleware) EXPECT() *MockMiddleware_Expecter {
	return &MockMiddleware_Expecter{mock: &_m.Mock}
}

// Wrap provides a mock function for the type MockMiddleware
func (_mock *MockMiddleware) Wrap(next http.RoundTripper) http.RoundTripper {
	ret := _mock.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 http.RoundTripper
	if returnFunc, ok := ret.Get(0).(func(http.RoundTripper) http.RoundTripper); ok {
		r0 = returnFunc(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.RoundTripper)
		}
	}
	return r0
}

// MockMiddleware_Wrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wrap'
type MockMiddleware_Wrap_Call struct {
	*mock.Call
}

// Wrap is a helper method to define mock.On call
//   - next http.RoundTripper
func (_e *MockMiddleware_Expecter) Wrap(next interface{}) *MockMiddleware_Wrap_Call {
	return &MockMiddleware_Wrap_Call{Call: _e.mock.On("Wrap", next)}
}

func (_c *MockMiddleware_Wrap_Call) Run(run func(next http.RoundTripper)) *MockMiddleware_Wrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.RoundTripper
		if args[0] != nil {
			arg0 = args[0].(http.RoundTripper)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMiddleware_Wrap_Call) Return(roundTripper http.RoundTripper) *MockMiddleware_Wrap_Call {
	_c.Call.Return(roundTripper)
	return _c
}

func (_c *MockMiddleware_Wrap_Call) RunAndReturn(run func(next http.RoundTripper) http.RoundTripper) *MockMiddleware_Wrap_Call {
	_c.Call.Return(run)
	return _c
}
