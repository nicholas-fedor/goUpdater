// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockResponseHandler creates a new instance of MockResponseHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponseHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponseHandler {
	mock := &MockResponseHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResponseHandler is an autogenerated mock type for the ResponseHandler type
type MockResponseHandler struct {
	mock.Mock
}

type MockResponseHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponseHandler) EXPECT() *MockResponseHandler_Expecter {
	return &MockResponseHandler_Expecter{mock: &_m.Mock}
}

// HandleResponse provides a mock function for the type MockResponseHandler
func (_mock *MockResponseHandler) HandleResponse(resp *http.Response) (interface{}, error) {
	ret := _mock.Called(resp)

	if len(ret) == 0 {
		panic("no return value specified for HandleResponse")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Response) (interface{}, error)); ok {
		return returnFunc(resp)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Response) interface{}); ok {
		r0 = returnFunc(resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Response) error); ok {
		r1 = returnFunc(resp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResponseHandler_HandleResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleResponse'
type MockResponseHandler_HandleResponse_Call struct {
	*mock.Call
}

// HandleResponse is a helper method to define mock.On call
//   - resp *http.Response
func (_e *MockResponseHandler_Expecter) HandleResponse(resp interface{}) *MockResponseHandler_HandleResponse_Call {
	return &MockResponseHandler_HandleResponse_Call{Call: _e.mock.On("HandleResponse", resp)}
}

func (_c *MockResponseHandler_HandleResponse_Call) Run(run func(resp *http.Response)) *MockResponseHandler_HandleResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Response
		if args[0] != nil {
			arg0 = args[0].(*http.Response)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockResponseHandler_HandleResponse_Call) Return(ifaceVal interface{}, err error) *MockResponseHandler_HandleResponse_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockResponseHandler_HandleResponse_Call) RunAndReturn(run func(resp *http.Response) (interface{}, error)) *MockResponseHandler_HandleResponse_Call {
	_c.Call.Return(run)
	return _c
}
