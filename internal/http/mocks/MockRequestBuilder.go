// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRequestBuilder creates a new instance of MockRequestBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestBuilder {
	mock := &MockRequestBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequestBuilder is an autogenerated mock type for the RequestBuilder type
type MockRequestBuilder struct {
	mock.Mock
}

type MockRequestBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestBuilder) EXPECT() *MockRequestBuilder_Expecter {
	return &MockRequestBuilder_Expecter{mock: &_m.Mock}
}

// BuildRequest provides a mock function for the type MockRequestBuilder
func (_mock *MockRequestBuilder) BuildRequest(method string, url string, body io.Reader) (*http.Request, error) {
	ret := _mock.Called(method, url, body)

	if len(ret) == 0 {
		panic("no return value specified for BuildRequest")
	}

	var r0 *http.Request
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, io.Reader) (*http.Request, error)); ok {
		return returnFunc(method, url, body)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, io.Reader) *http.Request); ok {
		r0 = returnFunc(method, url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = returnFunc(method, url, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequestBuilder_BuildRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildRequest'
type MockRequestBuilder_BuildRequest_Call struct {
	*mock.Call
}

// BuildRequest is a helper method to define mock.On call
//   - method string
//   - url string
//   - body io.Reader
func (_e *MockRequestBuilder_Expecter) BuildRequest(method interface{}, url interface{}, body interface{}) *MockRequestBuilder_BuildRequest_Call {
	return &MockRequestBuilder_BuildRequest_Call{Call: _e.mock.On("BuildRequest", method, url, body)}
}

func (_c *MockRequestBuilder_BuildRequest_Call) Run(run func(method string, url string, body io.Reader)) *MockRequestBuilder_BuildRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRequestBuilder_BuildRequest_Call) Return(request *http.Request, err error) *MockRequestBuilder_BuildRequest_Call {
	_c.Call.Return(request, err)
	return _c
}

func (_c *MockRequestBuilder_BuildRequest_Call) RunAndReturn(run func(method string, url string, body io.Reader) (*http.Request, error)) *MockRequestBuilder_BuildRequest_Call {
	_c.Call.Return(run)
	return _c
}
