// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// Args provides a mock function for the type MockCommand
func (_mock *MockCommand) Args() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Args")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockCommand_Args_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Args'
type MockCommand_Args_Call struct {
	*mock.Call
}

// Args is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Args() *MockCommand_Args_Call {
	return &MockCommand_Args_Call{Call: _e.mock.On("Args")}
}

func (_c *MockCommand_Args_Call) Run(run func()) *MockCommand_Args_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Args_Call) Return(strings []string) *MockCommand_Args_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockCommand_Args_Call) RunAndReturn(run func() []string) *MockCommand_Args_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function for the type MockCommand
func (_mock *MockCommand) Output() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockCommand_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Output() *MockCommand_Output_Call {
	return &MockCommand_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockCommand_Output_Call) Run(run func()) *MockCommand_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Output_Call) Return(bytes []byte, err error) *MockCommand_Output_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCommand_Output_Call) RunAndReturn(run func() ([]byte, error)) *MockCommand_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type MockCommand
func (_mock *MockCommand) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCommand_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockCommand_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Path() *MockCommand_Path_Call {
	return &MockCommand_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockCommand_Path_Call) Run(run func()) *MockCommand_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Path_Call) Return(s string) *MockCommand_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCommand_Path_Call) RunAndReturn(run func() string) *MockCommand_Path_Call {
	_c.Call.Return(run)
	return _c
}
