// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockExecCommand creates a new instance of MockExecCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecCommand {
	mock := &MockExecCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecCommand is an autogenerated mock type for the ExecCommand type
type MockExecCommand struct {
	mock.Mock
}

type MockExecCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecCommand) EXPECT() *MockExecCommand_Expecter {
	return &MockExecCommand_Expecter{mock: &_m.Mock}
}

// Args provides a mock function for the type MockExecCommand
func (_mock *MockExecCommand) Args() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Args")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockExecCommand_Args_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Args'
type MockExecCommand_Args_Call struct {
	*mock.Call
}

// Args is a helper method to define mock.On call
func (_e *MockExecCommand_Expecter) Args() *MockExecCommand_Args_Call {
	return &MockExecCommand_Args_Call{Call: _e.mock.On("Args")}
}

func (_c *MockExecCommand_Args_Call) Run(run func()) *MockExecCommand_Args_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecCommand_Args_Call) Return(strings []string) *MockExecCommand_Args_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockExecCommand_Args_Call) RunAndReturn(run func() []string) *MockExecCommand_Args_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function for the type MockExecCommand
func (_mock *MockExecCommand) Output() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExecCommand_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockExecCommand_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockExecCommand_Expecter) Output() *MockExecCommand_Output_Call {
	return &MockExecCommand_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockExecCommand_Output_Call) Run(run func()) *MockExecCommand_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecCommand_Output_Call) Return(bytes []byte, err error) *MockExecCommand_Output_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockExecCommand_Output_Call) RunAndReturn(run func() ([]byte, error)) *MockExecCommand_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type MockExecCommand
func (_mock *MockExecCommand) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockExecCommand_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockExecCommand_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockExecCommand_Expecter) Path() *MockExecCommand_Path_Call {
	return &MockExecCommand_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockExecCommand_Path_Call) Run(run func()) *MockExecCommand_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecCommand_Path_Call) Return(s string) *MockExecCommand_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockExecCommand_Path_Call) RunAndReturn(run func() string) *MockExecCommand_Path_Call {
	_c.Call.Return(run)
	return _c
}
