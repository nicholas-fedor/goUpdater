// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"archive/tar"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTarReader creates a new instance of MockTarReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTarReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTarReader {
	mock := &MockTarReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTarReader is an autogenerated mock type for the TarReader type
type MockTarReader struct {
	mock.Mock
}

type MockTarReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTarReader) EXPECT() *MockTarReader_Expecter {
	return &MockTarReader_Expecter{mock: &_m.Mock}
}

// Next provides a mock function for the type MockTarReader
func (_mock *MockTarReader) Next() (*tar.Header, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *tar.Header
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*tar.Header, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *tar.Header); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tar.Header)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTarReader_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockTarReader_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockTarReader_Expecter) Next() *MockTarReader_Next_Call {
	return &MockTarReader_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockTarReader_Next_Call) Run(run func()) *MockTarReader_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTarReader_Next_Call) Return(header *tar.Header, err error) *MockTarReader_Next_Call {
	_c.Call.Return(header, err)
	return _c
}

func (_c *MockTarReader_Next_Call) RunAndReturn(run func() (*tar.Header, error)) *MockTarReader_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockTarReader
func (_mock *MockTarReader) Read(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTarReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockTarReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - b []byte
func (_e *MockTarReader_Expecter) Read(b interface{}) *MockTarReader_Read_Call {
	return &MockTarReader_Read_Call{Call: _e.mock.On("Read", b)}
}

func (_c *MockTarReader_Read_Call) Run(run func(b []byte)) *MockTarReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTarReader_Read_Call) Return(n int, err error) *MockTarReader_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTarReader_Read_Call) RunAndReturn(run func(b []byte) (int, error)) *MockTarReader_Read_Call {
	_c.Call.Return(run)
	return _c
}
