// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"

	"github.com/nicholas-fedor/goUpdater/internal/archive"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// NewGzipReader provides a mock function for the type MockProcessor
func (_mock *MockProcessor) NewGzipReader(r io.Reader) (io.ReadCloser, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for NewGzipReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) (io.ReadCloser, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) io.ReadCloser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessor_NewGzipReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewGzipReader'
type MockProcessor_NewGzipReader_Call struct {
	*mock.Call
}

// NewGzipReader is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockProcessor_Expecter) NewGzipReader(r interface{}) *MockProcessor_NewGzipReader_Call {
	return &MockProcessor_NewGzipReader_Call{Call: _e.mock.On("NewGzipReader", r)}
}

func (_c *MockProcessor_NewGzipReader_Call) Run(run func(r io.Reader)) *MockProcessor_NewGzipReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProcessor_NewGzipReader_Call) Return(readCloser io.ReadCloser, err error) *MockProcessor_NewGzipReader_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockProcessor_NewGzipReader_Call) RunAndReturn(run func(r io.Reader) (io.ReadCloser, error)) *MockProcessor_NewGzipReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewTarReader provides a mock function for the type MockProcessor
func (_mock *MockProcessor) NewTarReader(r io.Reader) archive.TarReader {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for NewTarReader")
	}

	var r0 archive.TarReader
	if returnFunc, ok := ret.Get(0).(func(io.Reader) archive.TarReader); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(archive.TarReader)
		}
	}
	return r0
}

// MockProcessor_NewTarReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTarReader'
type MockProcessor_NewTarReader_Call struct {
	*mock.Call
}

// NewTarReader is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockProcessor_Expecter) NewTarReader(r interface{}) *MockProcessor_NewTarReader_Call {
	return &MockProcessor_NewTarReader_Call{Call: _e.mock.On("NewTarReader", r)}
}

func (_c *MockProcessor_NewTarReader_Call) Run(run func(r io.Reader)) *MockProcessor_NewTarReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProcessor_NewTarReader_Call) Return(tarReader archive.TarReader) *MockProcessor_NewTarReader_Call {
	_c.Call.Return(tarReader)
	return _c
}

func (_c *MockProcessor_NewTarReader_Call) RunAndReturn(run func(r io.Reader) archive.TarReader) *MockProcessor_NewTarReader_Call {
	_c.Call.Return(run)
	return _c
}
