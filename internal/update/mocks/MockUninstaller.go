// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockUninstaller creates a new instance of MockUninstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUninstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUninstaller {
	mock := &MockUninstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUninstaller is an autogenerated mock type for the Uninstaller type
type MockUninstaller struct {
	mock.Mock
}

type MockUninstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUninstaller) EXPECT() *MockUninstaller_Expecter {
	return &MockUninstaller_Expecter{mock: &_m.Mock}
}

// Remove provides a mock function for the type MockUninstaller
func (_mock *MockUninstaller) Remove(installDir string) error {
	ret := _mock.Called(installDir)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(installDir)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUninstaller_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockUninstaller_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - installDir string
func (_e *MockUninstaller_Expecter) Remove(installDir interface{}) *MockUninstaller_Remove_Call {
	return &MockUninstaller_Remove_Call{Call: _e.mock.On("Remove", installDir)}
}

func (_c *MockUninstaller_Remove_Call) Run(run func(installDir string)) *MockUninstaller_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUninstaller_Remove_Call) Return(err error) *MockUninstaller_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUninstaller_Remove_Call) RunAndReturn(run func(installDir string) error) *MockUninstaller_Remove_Call {
	_c.Call.Return(run)
	return _c
}
