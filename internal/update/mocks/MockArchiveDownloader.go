// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockArchiveDownloader creates a new instance of MockArchiveDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiveDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiveDownloader {
	mock := &MockArchiveDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArchiveDownloader is an autogenerated mock type for the ArchiveDownloader type
type MockArchiveDownloader struct {
	mock.Mock
}

type MockArchiveDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiveDownloader) EXPECT() *MockArchiveDownloader_Expecter {
	return &MockArchiveDownloader_Expecter{mock: &_m.Mock}
}

// GetLatest provides a mock function for the type MockArchiveDownloader
func (_mock *MockArchiveDownloader) GetLatest(destDir string) (string, string, error) {
	ret := _mock.Called(destDir)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return returnFunc(destDir)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(destDir)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(destDir)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(destDir)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockArchiveDownloader_GetLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatest'
type MockArchiveDownloader_GetLatest_Call struct {
	*mock.Call
}

// GetLatest is a helper method to define mock.On call
//   - destDir string
func (_e *MockArchiveDownloader_Expecter) GetLatest(destDir interface{}) *MockArchiveDownloader_GetLatest_Call {
	return &MockArchiveDownloader_GetLatest_Call{Call: _e.mock.On("GetLatest", destDir)}
}

func (_c *MockArchiveDownloader_GetLatest_Call) Run(run func(destDir string)) *MockArchiveDownloader_GetLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockArchiveDownloader_GetLatest_Call) Return(s string, s1 string, err error) *MockArchiveDownloader_GetLatest_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockArchiveDownloader_GetLatest_Call) RunAndReturn(run func(destDir string) (string, string, error)) *MockArchiveDownloader_GetLatest_Call {
	_c.Call.Return(run)
	return _c
}
