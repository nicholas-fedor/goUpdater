// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockVerifier creates a new instance of MockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifier {
	mock := &MockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerifier is an autogenerated mock type for the Verifier type
type MockVerifier struct {
	mock.Mock
}

type MockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifier) EXPECT() *MockVerifier_Expecter {
	return &MockVerifier_Expecter{mock: &_m.Mock}
}

// Installation provides a mock function for the type MockVerifier
func (_mock *MockVerifier) Installation(installDir string, version string) error {
	ret := _mock.Called(installDir, version)

	if len(ret) == 0 {
		panic("no return value specified for Installation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(installDir, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerifier_Installation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Installation'
type MockVerifier_Installation_Call struct {
	*mock.Call
}

// Installation is a helper method to define mock.On call
//   - installDir string
//   - version string
func (_e *MockVerifier_Expecter) Installation(installDir interface{}, version interface{}) *MockVerifier_Installation_Call {
	return &MockVerifier_Installation_Call{Call: _e.mock.On("Installation", installDir, version)}
}

func (_c *MockVerifier_Installation_Call) Run(run func(installDir string, version string)) *MockVerifier_Installation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVerifier_Installation_Call) Return(err error) *MockVerifier_Installation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerifier_Installation_Call) RunAndReturn(run func(installDir string, version string) error) *MockVerifier_Installation_Call {
	_c.Call.Return(run)
	return _c
}
