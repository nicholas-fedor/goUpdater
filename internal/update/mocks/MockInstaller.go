// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockInstaller creates a new instance of MockInstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstaller {
	mock := &MockInstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstaller is an autogenerated mock type for the Installer type
type MockInstaller struct {
	mock.Mock
}

type MockInstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstaller) EXPECT() *MockInstaller_Expecter {
	return &MockInstaller_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type MockInstaller
func (_mock *MockInstaller) Extract(archivePath string, installDir string, version string) error {
	ret := _mock.Called(archivePath, installDir, version)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(archivePath, installDir, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockInstaller_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - archivePath string
//   - installDir string
//   - version string
func (_e *MockInstaller_Expecter) Extract(archivePath interface{}, installDir interface{}, version interface{}) *MockInstaller_Extract_Call {
	return &MockInstaller_Extract_Call{Call: _e.mock.On("Extract", archivePath, installDir, version)}
}

func (_c *MockInstaller_Extract_Call) Run(run func(archivePath string, installDir string, version string)) *MockInstaller_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInstaller_Extract_Call) Return(err error) *MockInstaller_Extract_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_Extract_Call) RunAndReturn(run func(archivePath string, installDir string, version string) error) *MockInstaller_Extract_Call {
	_c.Call.Return(run)
	return _c
}
