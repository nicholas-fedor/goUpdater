// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPrivilegeManager creates a new instance of MockPrivilegeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivilegeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivilegeManager {
	mock := &MockPrivilegeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivilegeManager is an autogenerated mock type for the PrivilegeManager type
type MockPrivilegeManager struct {
	mock.Mock
}

type MockPrivilegeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivilegeManager) EXPECT() *MockPrivilegeManager_Expecter {
	return &MockPrivilegeManager_Expecter{mock: &_m.Mock}
}

// ElevateAndExecute provides a mock function for the type MockPrivilegeManager
func (_mock *MockPrivilegeManager) ElevateAndExecute(fn func() error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for ElevateAndExecute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPrivilegeManager_ElevateAndExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ElevateAndExecute'
type MockPrivilegeManager_ElevateAndExecute_Call struct {
	*mock.Call
}

// ElevateAndExecute is a helper method to define mock.On call
//   - fn func() error
func (_e *MockPrivilegeManager_Expecter) ElevateAndExecute(fn interface{}) *MockPrivilegeManager_ElevateAndExecute_Call {
	return &MockPrivilegeManager_ElevateAndExecute_Call{Call: _e.mock.On("ElevateAndExecute", fn)}
}

func (_c *MockPrivilegeManager_ElevateAndExecute_Call) Run(run func(fn func() error)) *MockPrivilegeManager_ElevateAndExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() error
		if args[0] != nil {
			arg0 = args[0].(func() error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPrivilegeManager_ElevateAndExecute_Call) Return(err error) *MockPrivilegeManager_ElevateAndExecute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPrivilegeManager_ElevateAndExecute_Call) RunAndReturn(run func(fn func() error) error) *MockPrivilegeManager_ElevateAndExecute_Call {
	_c.Call.Return(run)
	return _c
}
