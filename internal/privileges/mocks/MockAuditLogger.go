// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuditLogger creates a new instance of MockAuditLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLogger {
	mock := &MockAuditLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuditLogger is an autogenerated mock type for the AuditLogger type
type MockAuditLogger struct {
	mock.Mock
}

type MockAuditLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogger) EXPECT() *MockAuditLogger_Expecter {
	return &MockAuditLogger_Expecter{mock: &_m.Mock}
}

// LogElevationAttempt provides a mock function for the type MockAuditLogger
func (_mock *MockAuditLogger) LogElevationAttempt(success bool, reason string) {
	_mock.Called(success, reason)
	return
}

// MockAuditLogger_LogElevationAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogElevationAttempt'
type MockAuditLogger_LogElevationAttempt_Call struct {
	*mock.Call
}

// LogElevationAttempt is a helper method to define mock.On call
//   - success bool
//   - reason string
func (_e *MockAuditLogger_Expecter) LogElevationAttempt(success interface{}, reason interface{}) *MockAuditLogger_LogElevationAttempt_Call {
	return &MockAuditLogger_LogElevationAttempt_Call{Call: _e.mock.On("LogElevationAttempt", success, reason)}
}

func (_c *MockAuditLogger_LogElevationAttempt_Call) Run(run func(success bool, reason string)) *MockAuditLogger_LogElevationAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuditLogger_LogElevationAttempt_Call) Return() *MockAuditLogger_LogElevationAttempt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuditLogger_LogElevationAttempt_Call) RunAndReturn(run func(success bool, reason string)) *MockAuditLogger_LogElevationAttempt_Call {
	_c.Run(run)
	return _c
}

// LogPrivilegeChange provides a mock function for the type MockAuditLogger
func (_mock *MockAuditLogger) LogPrivilegeChange(operation string, fromUID int, toUID int, reason string) {
	_mock.Called(operation, fromUID, toUID, reason)
	return
}

// MockAuditLogger_LogPrivilegeChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPrivilegeChange'
type MockAuditLogger_LogPrivilegeChange_Call struct {
	*mock.Call
}

// LogPrivilegeChange is a helper method to define mock.On call
//   - operation string
//   - fromUID int
//   - toUID int
//   - reason string
func (_e *MockAuditLogger_Expecter) LogPrivilegeChange(operation interface{}, fromUID interface{}, toUID interface{}, reason interface{}) *MockAuditLogger_LogPrivilegeChange_Call {
	return &MockAuditLogger_LogPrivilegeChange_Call{Call: _e.mock.On("LogPrivilegeChange", operation, fromUID, toUID, reason)}
}

func (_c *MockAuditLogger_LogPrivilegeChange_Call) Run(run func(operation string, fromUID int, toUID int, reason string)) *MockAuditLogger_LogPrivilegeChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAuditLogger_LogPrivilegeChange_Call) Return() *MockAuditLogger_LogPrivilegeChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuditLogger_LogPrivilegeChange_Call) RunAndReturn(run func(operation string, fromUID int, toUID int, reason string)) *MockAuditLogger_LogPrivilegeChange_Call {
	_c.Run(run)
	return _c
}

// LogPrivilegeDrop provides a mock function for the type MockAuditLogger
func (_mock *MockAuditLogger) LogPrivilegeDrop(success bool, targetUID int, reason string) {
	_mock.Called(success, targetUID, reason)
	return
}

// MockAuditLogger_LogPrivilegeDrop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPrivilegeDrop'
type MockAuditLogger_LogPrivilegeDrop_Call struct {
	*mock.Call
}

// LogPrivilegeDrop is a helper method to define mock.On call
//   - success bool
//   - targetUID int
//   - reason string
func (_e *MockAuditLogger_Expecter) LogPrivilegeDrop(success interface{}, targetUID interface{}, reason interface{}) *MockAuditLogger_LogPrivilegeDrop_Call {
	return &MockAuditLogger_LogPrivilegeDrop_Call{Call: _e.mock.On("LogPrivilegeDrop", success, targetUID, reason)}
}

func (_c *MockAuditLogger_LogPrivilegeDrop_Call) Run(run func(success bool, targetUID int, reason string)) *MockAuditLogger_LogPrivilegeDrop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuditLogger_LogPrivilegeDrop_Call) Return() *MockAuditLogger_LogPrivilegeDrop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuditLogger_LogPrivilegeDrop_Call) RunAndReturn(run func(success bool, targetUID int, reason string)) *MockAuditLogger_LogPrivilegeDrop_Call {
	_c.Run(run)
	return _c
}
