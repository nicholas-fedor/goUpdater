// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockOSPrivilegeManager creates a new instance of MockOSPrivilegeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOSPrivilegeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOSPrivilegeManager {
	mock := &MockOSPrivilegeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOSPrivilegeManager is an autogenerated mock type for the OSPrivilegeManager type
type MockOSPrivilegeManager struct {
	mock.Mock
}

type MockOSPrivilegeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOSPrivilegeManager) EXPECT() *MockOSPrivilegeManager_Expecter {
	return &MockOSPrivilegeManager_Expecter{mock: &_m.Mock}
}

// Environ provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Environ() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environ")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockOSPrivilegeManager_Environ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environ'
type MockOSPrivilegeManager_Environ_Call struct {
	*mock.Call
}

// Environ is a helper method to define mock.On call
func (_e *MockOSPrivilegeManager_Expecter) Environ() *MockOSPrivilegeManager_Environ_Call {
	return &MockOSPrivilegeManager_Environ_Call{Call: _e.mock.On("Environ")}
}

func (_c *MockOSPrivilegeManager_Environ_Call) Run(run func()) *MockOSPrivilegeManager_Environ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Environ_Call) Return(strings []string) *MockOSPrivilegeManager_Environ_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockOSPrivilegeManager_Environ_Call) RunAndReturn(run func() []string) *MockOSPrivilegeManager_Environ_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSymlinks provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) EvalSymlinks(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for EvalSymlinks")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOSPrivilegeManager_EvalSymlinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSymlinks'
type MockOSPrivilegeManager_EvalSymlinks_Call struct {
	*mock.Call
}

// EvalSymlinks is a helper method to define mock.On call
//   - path string
func (_e *MockOSPrivilegeManager_Expecter) EvalSymlinks(path interface{}) *MockOSPrivilegeManager_EvalSymlinks_Call {
	return &MockOSPrivilegeManager_EvalSymlinks_Call{Call: _e.mock.On("EvalSymlinks", path)}
}

func (_c *MockOSPrivilegeManager_EvalSymlinks_Call) Run(run func(path string)) *MockOSPrivilegeManager_EvalSymlinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOSPrivilegeManager_EvalSymlinks_Call) Return(s string, err error) *MockOSPrivilegeManager_EvalSymlinks_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockOSPrivilegeManager_EvalSymlinks_Call) RunAndReturn(run func(path string) (string, error)) *MockOSPrivilegeManager_EvalSymlinks_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Exec(argv0 string, argv []string, envv []string) error {
	ret := _mock.Called(argv0, argv, envv)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []string, []string) error); ok {
		r0 = returnFunc(argv0, argv, envv)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSPrivilegeManager_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockOSPrivilegeManager_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - argv0 string
//   - argv []string
//   - envv []string
func (_e *MockOSPrivilegeManager_Expecter) Exec(argv0 interface{}, argv interface{}, envv interface{}) *MockOSPrivilegeManager_Exec_Call {
	return &MockOSPrivilegeManager_Exec_Call{Call: _e.mock.On("Exec", argv0, argv, envv)}
}

func (_c *MockOSPrivilegeManager_Exec_Call) Run(run func(argv0 string, argv []string, envv []string)) *MockOSPrivilegeManager_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Exec_Call) Return(err error) *MockOSPrivilegeManager_Exec_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSPrivilegeManager_Exec_Call) RunAndReturn(run func(argv0 string, argv []string, envv []string) error) *MockOSPrivilegeManager_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Executable provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Executable() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Executable")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOSPrivilegeManager_Executable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Executable'
type MockOSPrivilegeManager_Executable_Call struct {
	*mock.Call
}

// Executable is a helper method to define mock.On call
func (_e *MockOSPrivilegeManager_Expecter) Executable() *MockOSPrivilegeManager_Executable_Call {
	return &MockOSPrivilegeManager_Executable_Call{Call: _e.mock.On("Executable")}
}

func (_c *MockOSPrivilegeManager_Executable_Call) Run(run func()) *MockOSPrivilegeManager_Executable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Executable_Call) Return(s string, err error) *MockOSPrivilegeManager_Executable_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockOSPrivilegeManager_Executable_Call) RunAndReturn(run func() (string, error)) *MockOSPrivilegeManager_Executable_Call {
	_c.Call.Return(run)
	return _c
}

// Getenv provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Getenv(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Getenv")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockOSPrivilegeManager_Getenv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Getenv'
type MockOSPrivilegeManager_Getenv_Call struct {
	*mock.Call
}

// Getenv is a helper method to define mock.On call
//   - key string
func (_e *MockOSPrivilegeManager_Expecter) Getenv(key interface{}) *MockOSPrivilegeManager_Getenv_Call {
	return &MockOSPrivilegeManager_Getenv_Call{Call: _e.mock.On("Getenv", key)}
}

func (_c *MockOSPrivilegeManager_Getenv_Call) Run(run func(key string)) *MockOSPrivilegeManager_Getenv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Getenv_Call) Return(s string) *MockOSPrivilegeManager_Getenv_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockOSPrivilegeManager_Getenv_Call) RunAndReturn(run func(key string) string) *MockOSPrivilegeManager_Getenv_Call {
	_c.Call.Return(run)
	return _c
}

// Geteuid provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Geteuid() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Geteuid")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockOSPrivilegeManager_Geteuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Geteuid'
type MockOSPrivilegeManager_Geteuid_Call struct {
	*mock.Call
}

// Geteuid is a helper method to define mock.On call
func (_e *MockOSPrivilegeManager_Expecter) Geteuid() *MockOSPrivilegeManager_Geteuid_Call {
	return &MockOSPrivilegeManager_Geteuid_Call{Call: _e.mock.On("Geteuid")}
}

func (_c *MockOSPrivilegeManager_Geteuid_Call) Run(run func()) *MockOSPrivilegeManager_Geteuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Geteuid_Call) Return(n int) *MockOSPrivilegeManager_Geteuid_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockOSPrivilegeManager_Geteuid_Call) RunAndReturn(run func() int) *MockOSPrivilegeManager_Geteuid_Call {
	_c.Call.Return(run)
	return _c
}

// Getgid provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Getgid() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Getgid")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockOSPrivilegeManager_Getgid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Getgid'
type MockOSPrivilegeManager_Getgid_Call struct {
	*mock.Call
}

// Getgid is a helper method to define mock.On call
func (_e *MockOSPrivilegeManager_Expecter) Getgid() *MockOSPrivilegeManager_Getgid_Call {
	return &MockOSPrivilegeManager_Getgid_Call{Call: _e.mock.On("Getgid")}
}

func (_c *MockOSPrivilegeManager_Getgid_Call) Run(run func()) *MockOSPrivilegeManager_Getgid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Getgid_Call) Return(n int) *MockOSPrivilegeManager_Getgid_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockOSPrivilegeManager_Getgid_Call) RunAndReturn(run func() int) *MockOSPrivilegeManager_Getgid_Call {
	_c.Call.Return(run)
	return _c
}

// Getuid provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Getuid() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Getuid")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockOSPrivilegeManager_Getuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Getuid'
type MockOSPrivilegeManager_Getuid_Call struct {
	*mock.Call
}

// Getuid is a helper method to define mock.On call
func (_e *MockOSPrivilegeManager_Expecter) Getuid() *MockOSPrivilegeManager_Getuid_Call {
	return &MockOSPrivilegeManager_Getuid_Call{Call: _e.mock.On("Getuid")}
}

func (_c *MockOSPrivilegeManager_Getuid_Call) Run(run func()) *MockOSPrivilegeManager_Getuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Getuid_Call) Return(n int) *MockOSPrivilegeManager_Getuid_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockOSPrivilegeManager_Getuid_Call) RunAndReturn(run func() int) *MockOSPrivilegeManager_Getuid_Call {
	_c.Call.Return(run)
	return _c
}

// Setgid provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Setgid(gid int) error {
	ret := _mock.Called(gid)

	if len(ret) == 0 {
		panic("no return value specified for Setgid")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(gid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSPrivilegeManager_Setgid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setgid'
type MockOSPrivilegeManager_Setgid_Call struct {
	*mock.Call
}

// Setgid is a helper method to define mock.On call
//   - gid int
func (_e *MockOSPrivilegeManager_Expecter) Setgid(gid interface{}) *MockOSPrivilegeManager_Setgid_Call {
	return &MockOSPrivilegeManager_Setgid_Call{Call: _e.mock.On("Setgid", gid)}
}

func (_c *MockOSPrivilegeManager_Setgid_Call) Run(run func(gid int)) *MockOSPrivilegeManager_Setgid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Setgid_Call) Return(err error) *MockOSPrivilegeManager_Setgid_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSPrivilegeManager_Setgid_Call) RunAndReturn(run func(gid int) error) *MockOSPrivilegeManager_Setgid_Call {
	_c.Call.Return(run)
	return _c
}

// Setuid provides a mock function for the type MockOSPrivilegeManager
func (_mock *MockOSPrivilegeManager) Setuid(uid int) error {
	ret := _mock.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for Setuid")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(uid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSPrivilegeManager_Setuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setuid'
type MockOSPrivilegeManager_Setuid_Call struct {
	*mock.Call
}

// Setuid is a helper method to define mock.On call
//   - uid int
func (_e *MockOSPrivilegeManager_Expecter) Setuid(uid interface{}) *MockOSPrivilegeManager_Setuid_Call {
	return &MockOSPrivilegeManager_Setuid_Call{Call: _e.mock.On("Setuid", uid)}
}

func (_c *MockOSPrivilegeManager_Setuid_Call) Run(run func(uid int)) *MockOSPrivilegeManager_Setuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOSPrivilegeManager_Setuid_Call) Return(err error) *MockOSPrivilegeManager_Setuid_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSPrivilegeManager_Setuid_Call) RunAndReturn(run func(uid int) error) *MockOSPrivilegeManager_Setuid_Call {
	_c.Call.Return(run)
	return _c
}
