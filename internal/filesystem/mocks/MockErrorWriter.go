// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockErrorWriter creates a new instance of MockErrorWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorWriter {
	mock := &MockErrorWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorWriter is an autogenerated mock type for the ErrorWriter type
type MockErrorWriter struct {
	mock.Mock
}

type MockErrorWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorWriter) EXPECT() *MockErrorWriter_Expecter {
	return &MockErrorWriter_Expecter{mock: &_m.Mock}
}

// Fprintf provides a mock function for the type MockErrorWriter
func (_mock *MockErrorWriter) Fprintf(w io.Writer, format string, a ...interface{}) (int, error) {
	var tmpRet mock.Arguments
	if len(a) > 0 {
		tmpRet = _mock.Called(w, format, a)
	} else {
		tmpRet = _mock.Called(w, format)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Fprintf")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Writer, string, ...interface{}) (int, error)); ok {
		return returnFunc(w, format, a...)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Writer, string, ...interface{}) int); ok {
		r0 = returnFunc(w, format, a...)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Writer, string, ...interface{}) error); ok {
		r1 = returnFunc(w, format, a...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorWriter_Fprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fprintf'
type MockErrorWriter_Fprintf_Call struct {
	*mock.Call
}

// Fprintf is a helper method to define mock.On call
//   - w io.Writer
//   - format string
//   - a ...interface{}
func (_e *MockErrorWriter_Expecter) Fprintf(w interface{}, format interface{}, a ...interface{}) *MockErrorWriter_Fprintf_Call {
	return &MockErrorWriter_Fprintf_Call{Call: _e.mock.On("Fprintf",
		append([]interface{}{w, format}, a...)...)}
}

func (_c *MockErrorWriter_Fprintf_Call) Run(run func(w io.Writer, format string, a ...interface{})) *MockErrorWriter_Fprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Writer
		if args[0] != nil {
			arg0 = args[0].(io.Writer)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockErrorWriter_Fprintf_Call) Return(n int, err error) *MockErrorWriter_Fprintf_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockErrorWriter_Fprintf_Call) RunAndReturn(run func(w io.Writer, format string, a ...interface{}) (int, error)) *MockErrorWriter_Fprintf_Call {
	_c.Call.Return(run)
	return _c
}
