// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"encoding/json"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJSONEncoder creates a new instance of MockJSONEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJSONEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJSONEncoder {
	mock := &MockJSONEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJSONEncoder is an autogenerated mock type for the JSONEncoder type
type MockJSONEncoder struct {
	mock.Mock
}

type MockJSONEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJSONEncoder) EXPECT() *MockJSONEncoder_Expecter {
	return &MockJSONEncoder_Expecter{mock: &_m.Mock}
}

// NewEncoder provides a mock function for the type MockJSONEncoder
func (_mock *MockJSONEncoder) NewEncoder(w io.Writer) *json.Encoder {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for NewEncoder")
	}

	var r0 *json.Encoder
	if returnFunc, ok := ret.Get(0).(func(io.Writer) *json.Encoder); ok {
		r0 = returnFunc(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*json.Encoder)
		}
	}
	return r0
}

// MockJSONEncoder_NewEncoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewEncoder'
type MockJSONEncoder_NewEncoder_Call struct {
	*mock.Call
}

// NewEncoder is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockJSONEncoder_Expecter) NewEncoder(w interface{}) *MockJSONEncoder_NewEncoder_Call {
	return &MockJSONEncoder_NewEncoder_Call{Call: _e.mock.On("NewEncoder", w)}
}

func (_c *MockJSONEncoder_NewEncoder_Call) Run(run func(w io.Writer)) *MockJSONEncoder_NewEncoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Writer
		if args[0] != nil {
			arg0 = args[0].(io.Writer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJSONEncoder_NewEncoder_Call) Return(encoder *json.Encoder) *MockJSONEncoder_NewEncoder_Call {
	_c.Call.Return(encoder)
	return _c
}

func (_c *MockJSONEncoder_NewEncoder_Call) RunAndReturn(run func(w io.Writer) *json.Encoder) *MockJSONEncoder_NewEncoder_Call {
	_c.Call.Return(run)
	return _c
}
