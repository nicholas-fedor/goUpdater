// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileSystem creates a new instance of MockFileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystem {
	mock := &MockFileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSystem is an autogenerated mock type for the FileSystem type
type MockFileSystem struct {
	mock.Mock
}

type MockFileSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystem) EXPECT() *MockFileSystem_Expecter {
	return &MockFileSystem_Expecter{mock: &_m.Mock}
}

// Chmod provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Chmod(name string, mode os.FileMode) error {
	ret := _mock.Called(name, mode)

	if len(ret) == 0 {
		panic("no return value specified for Chmod")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(name, mode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_Chmod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chmod'
type MockFileSystem_Chmod_Call struct {
	*mock.Call
}

// Chmod is a helper method to define mock.On call
//   - name string
//   - mode os.FileMode
func (_e *MockFileSystem_Expecter) Chmod(name interface{}, mode interface{}) *MockFileSystem_Chmod_Call {
	return &MockFileSystem_Chmod_Call{Call: _e.mock.On("Chmod", name, mode)}
}

func (_c *MockFileSystem_Chmod_Call) Run(run func(name string, mode os.FileMode)) *MockFileSystem_Chmod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_Chmod_Call) Return(err error) *MockFileSystem_Chmod_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_Chmod_Call) RunAndReturn(run func(name string, mode os.FileMode) error) *MockFileSystem_Chmod_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Create(name string) (*os.File, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFileSystem_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystem_Expecter) Create(name interface{}) *MockFileSystem_Create_Call {
	return &MockFileSystem_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockFileSystem_Create_Call) Run(run func(name string)) *MockFileSystem_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_Create_Call) Return(file *os.File, err error) *MockFileSystem_Create_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileSystem_Create_Call) RunAndReturn(run func(name string) (*os.File, error)) *MockFileSystem_Create_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSymlinks provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) EvalSymlinks(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for EvalSymlinks")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_EvalSymlinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSymlinks'
type MockFileSystem_EvalSymlinks_Call struct {
	*mock.Call
}

// EvalSymlinks is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystem_Expecter) EvalSymlinks(path interface{}) *MockFileSystem_EvalSymlinks_Call {
	return &MockFileSystem_EvalSymlinks_Call{Call: _e.mock.On("EvalSymlinks", path)}
}

func (_c *MockFileSystem_EvalSymlinks_Call) Run(run func(path string)) *MockFileSystem_EvalSymlinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_EvalSymlinks_Call) Return(s string, err error) *MockFileSystem_EvalSymlinks_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystem_EvalSymlinks_Call) RunAndReturn(run func(path string) (string, error)) *MockFileSystem_EvalSymlinks_Call {
	_c.Call.Return(run)
	return _c
}

// IsNotExist provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) IsNotExist(err error) bool {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsNotExist")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(error) bool); ok {
		r0 = returnFunc(err)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFileSystem_IsNotExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNotExist'
type MockFileSystem_IsNotExist_Call struct {
	*mock.Call
}

// IsNotExist is a helper method to define mock.On call
//   - err error
func (_e *MockFileSystem_Expecter) IsNotExist(err interface{}) *MockFileSystem_IsNotExist_Call {
	return &MockFileSystem_IsNotExist_Call{Call: _e.mock.On("IsNotExist", err)}
}

func (_c *MockFileSystem_IsNotExist_Call) Run(run func(err error)) *MockFileSystem_IsNotExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_IsNotExist_Call) Return(b bool) *MockFileSystem_IsNotExist_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFileSystem_IsNotExist_Call) RunAndReturn(run func(err error) bool) *MockFileSystem_IsNotExist_Call {
	_c.Call.Return(run)
	return _c
}

// Link provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Link(oldname string, newname string) error {
	ret := _mock.Called(oldname, newname)

	if len(ret) == 0 {
		panic("no return value specified for Link")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldname, newname)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_Link_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Link'
type MockFileSystem_Link_Call struct {
	*mock.Call
}

// Link is a helper method to define mock.On call
//   - oldname string
//   - newname string
func (_e *MockFileSystem_Expecter) Link(oldname interface{}, newname interface{}) *MockFileSystem_Link_Call {
	return &MockFileSystem_Link_Call{Call: _e.mock.On("Link", oldname, newname)}
}

func (_c *MockFileSystem_Link_Call) Run(run func(oldname string, newname string)) *MockFileSystem_Link_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_Link_Call) Return(err error) *MockFileSystem_Link_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_Link_Call) RunAndReturn(run func(oldname string, newname string) error) *MockFileSystem_Link_Call {
	_c.Call.Return(run)
	return _c
}

// Lstat provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Lstat(name string) (os.FileInfo, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Lstat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_Lstat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lstat'
type MockFileSystem_Lstat_Call struct {
	*mock.Call
}

// Lstat is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystem_Expecter) Lstat(name interface{}) *MockFileSystem_Lstat_Call {
	return &MockFileSystem_Lstat_Call{Call: _e.mock.On("Lstat", name)}
}

func (_c *MockFileSystem_Lstat_Call) Run(run func(name string)) *MockFileSystem_Lstat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_Lstat_Call) Return(v os.FileInfo, err error) *MockFileSystem_Lstat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFileSystem_Lstat_Call) RunAndReturn(run func(name string) (os.FileInfo, error)) *MockFileSystem_Lstat_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) MkdirAll(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFileSystem_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *MockFileSystem_Expecter) MkdirAll(path interface{}, perm interface{}) *MockFileSystem_MkdirAll_Call {
	return &MockFileSystem_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *MockFileSystem_MkdirAll_Call) Run(run func(path string, perm os.FileMode)) *MockFileSystem_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_MkdirAll_Call) Return(err error) *MockFileSystem_MkdirAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_MkdirAll_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *MockFileSystem_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirTemp provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) MkdirTemp(dir string, pattern string) (string, error) {
	ret := _mock.Called(dir, pattern)

	if len(ret) == 0 {
		panic("no return value specified for MkdirTemp")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(dir, pattern)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(dir, pattern)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(dir, pattern)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_MkdirTemp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirTemp'
type MockFileSystem_MkdirTemp_Call struct {
	*mock.Call
}

// MkdirTemp is a helper method to define mock.On call
//   - dir string
//   - pattern string
func (_e *MockFileSystem_Expecter) MkdirTemp(dir interface{}, pattern interface{}) *MockFileSystem_MkdirTemp_Call {
	return &MockFileSystem_MkdirTemp_Call{Call: _e.mock.On("MkdirTemp", dir, pattern)}
}

func (_c *MockFileSystem_MkdirTemp_Call) Run(run func(dir string, pattern string)) *MockFileSystem_MkdirTemp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_MkdirTemp_Call) Return(s string, err error) *MockFileSystem_MkdirTemp_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystem_MkdirTemp_Call) RunAndReturn(run func(dir string, pattern string) (string, error)) *MockFileSystem_MkdirTemp_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Open(name string) (*os.File, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockFileSystem_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystem_Expecter) Open(name interface{}) *MockFileSystem_Open_Call {
	return &MockFileSystem_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MockFileSystem_Open_Call) Run(run func(name string)) *MockFileSystem_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_Open_Call) Return(file *os.File, err error) *MockFileSystem_Open_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileSystem_Open_Call) RunAndReturn(run func(name string) (*os.File, error)) *MockFileSystem_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	ret := _mock.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, os.FileMode) (*os.File, error)); ok {
		return returnFunc(name, flag, perm)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, os.FileMode) *os.File); ok {
		r0 = returnFunc(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = returnFunc(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type MockFileSystem_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - name string
//   - flag int
//   - perm os.FileMode
func (_e *MockFileSystem_Expecter) OpenFile(name interface{}, flag interface{}, perm interface{}) *MockFileSystem_OpenFile_Call {
	return &MockFileSystem_OpenFile_Call{Call: _e.mock.On("OpenFile", name, flag, perm)}
}

func (_c *MockFileSystem_OpenFile_Call) Run(run func(name string, flag int, perm os.FileMode)) *MockFileSystem_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_OpenFile_Call) Return(file *os.File, err error) *MockFileSystem_OpenFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileSystem_OpenFile_Call) RunAndReturn(run func(name string, flag int, perm os.FileMode) (*os.File, error)) *MockFileSystem_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) RemoveAll(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockFileSystem_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystem_Expecter) RemoveAll(path interface{}) *MockFileSystem_RemoveAll_Call {
	return &MockFileSystem_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *MockFileSystem_RemoveAll_Call) Run(run func(path string)) *MockFileSystem_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_RemoveAll_Call) Return(err error) *MockFileSystem_RemoveAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_RemoveAll_Call) RunAndReturn(run func(path string) error) *MockFileSystem_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Stat(name string) (os.FileInfo, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFileSystem_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *MockFileSystem_Expecter) Stat(name interface{}) *MockFileSystem_Stat_Call {
	return &MockFileSystem_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *MockFileSystem_Stat_Call) Run(run func(name string)) *MockFileSystem_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_Stat_Call) Return(v os.FileInfo, err error) *MockFileSystem_Stat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFileSystem_Stat_Call) RunAndReturn(run func(name string) (os.FileInfo, error)) *MockFileSystem_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// Symlink provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) Symlink(oldname string, newname string) error {
	ret := _mock.Called(oldname, newname)

	if len(ret) == 0 {
		panic("no return value specified for Symlink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldname, newname)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_Symlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Symlink'
type MockFileSystem_Symlink_Call struct {
	*mock.Call
}

// Symlink is a helper method to define mock.On call
//   - oldname string
//   - newname string
func (_e *MockFileSystem_Expecter) Symlink(oldname interface{}, newname interface{}) *MockFileSystem_Symlink_Call {
	return &MockFileSystem_Symlink_Call{Call: _e.mock.On("Symlink", oldname, newname)}
}

func (_c *MockFileSystem_Symlink_Call) Run(run func(oldname string, newname string)) *MockFileSystem_Symlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_Symlink_Call) Return(err error) *MockFileSystem_Symlink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_Symlink_Call) RunAndReturn(run func(oldname string, newname string) error) *MockFileSystem_Symlink_Call {
	_c.Call.Return(run)
	return _c
}

// TempDir provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) TempDir() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TempDir")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFileSystem_TempDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TempDir'
type MockFileSystem_TempDir_Call struct {
	*mock.Call
}

// TempDir is a helper method to define mock.On call
func (_e *MockFileSystem_Expecter) TempDir() *MockFileSystem_TempDir_Call {
	return &MockFileSystem_TempDir_Call{Call: _e.mock.On("TempDir")}
}

func (_c *MockFileSystem_TempDir_Call) Run(run func()) *MockFileSystem_TempDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileSystem_TempDir_Call) Return(s string) *MockFileSystem_TempDir_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFileSystem_TempDir_Call) RunAndReturn(run func() string) *MockFileSystem_TempDir_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) UserHomeDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type MockFileSystem_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *MockFileSystem_Expecter) UserHomeDir() *MockFileSystem_UserHomeDir_Call {
	return &MockFileSystem_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *MockFileSystem_UserHomeDir_Call) Run(run func()) *MockFileSystem_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileSystem_UserHomeDir_Call) Return(s string, err error) *MockFileSystem_UserHomeDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystem_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *MockFileSystem_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}
