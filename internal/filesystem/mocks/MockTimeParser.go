// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTimeParser creates a new instance of MockTimeParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeParser {
	mock := &MockTimeParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTimeParser is an autogenerated mock type for the TimeParser type
type MockTimeParser struct {
	mock.Mock
}

type MockTimeParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeParser) EXPECT() *MockTimeParser_Expecter {
	return &MockTimeParser_Expecter{mock: &_m.Mock}
}

// Format provides a mock function for the type MockTimeParser
func (_mock *MockTimeParser) Format(t time.Time, layout string) string {
	ret := _mock.Called(t, layout)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(time.Time, string) string); ok {
		r0 = returnFunc(t, layout)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTimeParser_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type MockTimeParser_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - t time.Time
//   - layout string
func (_e *MockTimeParser_Expecter) Format(t interface{}, layout interface{}) *MockTimeParser_Format_Call {
	return &MockTimeParser_Format_Call{Call: _e.mock.On("Format", t, layout)}
}

func (_c *MockTimeParser_Format_Call) Run(run func(t time.Time, layout string)) *MockTimeParser_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTimeParser_Format_Call) Return(s string) *MockTimeParser_Format_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTimeParser_Format_Call) RunAndReturn(run func(t time.Time, layout string) string) *MockTimeParser_Format_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function for the type MockTimeParser
func (_mock *MockTimeParser) Parse(layout string, value string) (time.Time, error) {
	ret := _mock.Called(layout, value)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (time.Time, error)); ok {
		return returnFunc(layout, value)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) time.Time); ok {
		r0 = returnFunc(layout, value)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(layout, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTimeParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockTimeParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - layout string
//   - value string
func (_e *MockTimeParser_Expecter) Parse(layout interface{}, value interface{}) *MockTimeParser_Parse_Call {
	return &MockTimeParser_Parse_Call{Call: _e.mock.On("Parse", layout, value)}
}

func (_c *MockTimeParser_Parse_Call) Run(run func(layout string, value string)) *MockTimeParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTimeParser_Parse_Call) Return(time1 time.Time, err error) *MockTimeParser_Parse_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockTimeParser_Parse_Call) RunAndReturn(run func(layout string, value string) (time.Time, error)) *MockTimeParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}
