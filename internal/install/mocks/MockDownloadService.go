// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDownloadService creates a new instance of MockDownloadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloadService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloadService {
	mock := &MockDownloadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDownloadService is an autogenerated mock type for the DownloadService type
type MockDownloadService struct {
	mock.Mock
}

type MockDownloadService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloadService) EXPECT() *MockDownloadService_Expecter {
	return &MockDownloadService_Expecter{mock: &_m.Mock}
}

// GetLatest provides a mock function for the type MockDownloadService
func (_mock *MockDownloadService) GetLatest(tempDir string) (string, string, error) {
	ret := _mock.Called(tempDir)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return returnFunc(tempDir)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(tempDir)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(tempDir)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(tempDir)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDownloadService_GetLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatest'
type MockDownloadService_GetLatest_Call struct {
	*mock.Call
}

// GetLatest is a helper method to define mock.On call
//   - tempDir string
func (_e *MockDownloadService_Expecter) GetLatest(tempDir interface{}) *MockDownloadService_GetLatest_Call {
	return &MockDownloadService_GetLatest_Call{Call: _e.mock.On("GetLatest", tempDir)}
}

func (_c *MockDownloadService_GetLatest_Call) Run(run func(tempDir string)) *MockDownloadService_GetLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDownloadService_GetLatest_Call) Return(archivePath string, checksum string, err error) *MockDownloadService_GetLatest_Call {
	_c.Call.Return(archivePath, checksum, err)
	return _c
}

func (_c *MockDownloadService_GetLatest_Call) RunAndReturn(run func(tempDir string) (string, string, error)) *MockDownloadService_GetLatest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVersionInfo provides a mock function for the type MockDownloadService
func (_mock *MockDownloadService) GetLatestVersionInfo() (struct{ Version string }, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersionInfo")
	}

	var r0 struct{ Version string }
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (struct{ Version string }, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() struct{ Version string }); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(struct{ Version string })
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDownloadService_GetLatestVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersionInfo'
type MockDownloadService_GetLatestVersionInfo_Call struct {
	*mock.Call
}

// GetLatestVersionInfo is a helper method to define mock.On call
func (_e *MockDownloadService_Expecter) GetLatestVersionInfo() *MockDownloadService_GetLatestVersionInfo_Call {
	return &MockDownloadService_GetLatestVersionInfo_Call{Call: _e.mock.On("GetLatestVersionInfo")}
}

func (_c *MockDownloadService_GetLatestVersionInfo_Call) Run(run func()) *MockDownloadService_GetLatestVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloadService_GetLatestVersionInfo_Call) Return(versionInfo struct{ Version string }, err error) *MockDownloadService_GetLatestVersionInfo_Call {
	_c.Call.Return(versionInfo, err)
	return _c
}

func (_c *MockDownloadService_GetLatestVersionInfo_Call) RunAndReturn(run func() (struct{ Version string }, error)) *MockDownloadService_GetLatestVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}
