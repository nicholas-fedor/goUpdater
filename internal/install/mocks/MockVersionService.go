// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersionService creates a new instance of MockVersionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionService {
	mock := &MockVersionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionService is an autogenerated mock type for the VersionService type
type MockVersionService struct {
	mock.Mock
}

type MockVersionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionService) EXPECT() *MockVersionService_Expecter {
	return &MockVersionService_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function for the type MockVersionService
func (_mock *MockVersionService) Compare(installedVersion string, latestVersion string) (int, error) {
	ret := _mock.Called(installedVersion, latestVersion)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return returnFunc(installedVersion, latestVersion)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = returnFunc(installedVersion, latestVersion)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(installedVersion, latestVersion)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVersionService_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockVersionService_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - installedVersion string
//   - latestVersion string
func (_e *MockVersionService_Expecter) Compare(installedVersion interface{}, latestVersion interface{}) *MockVersionService_Compare_Call {
	return &MockVersionService_Compare_Call{Call: _e.mock.On("Compare", installedVersion, latestVersion)}
}

func (_c *MockVersionService_Compare_Call) Run(run func(installedVersion string, latestVersion string)) *MockVersionService_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVersionService_Compare_Call) Return(n int, err error) *MockVersionService_Compare_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockVersionService_Compare_Call) RunAndReturn(run func(installedVersion string, latestVersion string) (int, error)) *MockVersionService_Compare_Call {
	_c.Call.Return(run)
	return _c
}
