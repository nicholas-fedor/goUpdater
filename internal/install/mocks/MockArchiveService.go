// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockArchiveService creates a new instance of MockArchiveService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiveService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiveService {
	mock := &MockArchiveService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArchiveService is an autogenerated mock type for the ArchiveService type
type MockArchiveService struct {
	mock.Mock
}

type MockArchiveService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiveService) EXPECT() *MockArchiveService_Expecter {
	return &MockArchiveService_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type MockArchiveService
func (_mock *MockArchiveService) Extract(archivePath string, destDir string) error {
	ret := _mock.Called(archivePath, destDir)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(archivePath, destDir)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArchiveService_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockArchiveService_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - archivePath string
//   - destDir string
func (_e *MockArchiveService_Expecter) Extract(archivePath interface{}, destDir interface{}) *MockArchiveService_Extract_Call {
	return &MockArchiveService_Extract_Call{Call: _e.mock.On("Extract", archivePath, destDir)}
}

func (_c *MockArchiveService_Extract_Call) Run(run func(archivePath string, destDir string)) *MockArchiveService_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiveService_Extract_Call) Return(err error) *MockArchiveService_Extract_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArchiveService_Extract_Call) RunAndReturn(run func(archivePath string, destDir string) error) *MockArchiveService_Extract_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractVersion provides a mock function for the type MockArchiveService
func (_mock *MockArchiveService) ExtractVersion(archivePath string) string {
	ret := _mock.Called(archivePath)

	if len(ret) == 0 {
		panic("no return value specified for ExtractVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(archivePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockArchiveService_ExtractVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractVersion'
type MockArchiveService_ExtractVersion_Call struct {
	*mock.Call
}

// ExtractVersion is a helper method to define mock.On call
//   - archivePath string
func (_e *MockArchiveService_Expecter) ExtractVersion(archivePath interface{}) *MockArchiveService_ExtractVersion_Call {
	return &MockArchiveService_ExtractVersion_Call{Call: _e.mock.On("ExtractVersion", archivePath)}
}

func (_c *MockArchiveService_ExtractVersion_Call) Run(run func(archivePath string)) *MockArchiveService_ExtractVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockArchiveService_ExtractVersion_Call) Return(s string) *MockArchiveService_ExtractVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockArchiveService_ExtractVersion_Call) RunAndReturn(run func(archivePath string) string) *MockArchiveService_ExtractVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockArchiveService
func (_mock *MockArchiveService) Validate(archivePath string) error {
	ret := _mock.Called(archivePath)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(archivePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArchiveService_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockArchiveService_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - archivePath string
func (_e *MockArchiveService_Expecter) Validate(archivePath interface{}) *MockArchiveService_Validate_Call {
	return &MockArchiveService_Validate_Call{Call: _e.mock.On("Validate", archivePath)}
}

func (_c *MockArchiveService_Validate_Call) Run(run func(archivePath string)) *MockArchiveService_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockArchiveService_Validate_Call) Return(err error) *MockArchiveService_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArchiveService_Validate_Call) RunAndReturn(run func(archivePath string) error) *MockArchiveService_Validate_Call {
	_c.Call.Return(run)
	return _c
}
