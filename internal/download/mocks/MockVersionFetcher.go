// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/nicholas-fedor/goUpdater/internal/http"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersionFetcher creates a new instance of MockVersionFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionFetcher {
	mock := &MockVersionFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionFetcher is an autogenerated mock type for the VersionFetcher type
type MockVersionFetcher struct {
	mock.Mock
}

type MockVersionFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionFetcher) EXPECT() *MockVersionFetcher_Expecter {
	return &MockVersionFetcher_Expecter{mock: &_m.Mock}
}

// GetLatestVersion provides a mock function for the type MockVersionFetcher
func (_mock *MockVersionFetcher) GetLatestVersion() (*http.GoVersionInfo, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersion")
	}

	var r0 *http.GoVersionInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*http.GoVersionInfo, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *http.GoVersionInfo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.GoVersionInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVersionFetcher_GetLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersion'
type MockVersionFetcher_GetLatestVersion_Call struct {
	*mock.Call
}

// GetLatestVersion is a helper method to define mock.On call
func (_e *MockVersionFetcher_Expecter) GetLatestVersion() *MockVersionFetcher_GetLatestVersion_Call {
	return &MockVersionFetcher_GetLatestVersion_Call{Call: _e.mock.On("GetLatestVersion")}
}

func (_c *MockVersionFetcher_GetLatestVersion_Call) Run(run func()) *MockVersionFetcher_GetLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersionFetcher_GetLatestVersion_Call) Return(goVersionInfo *http.GoVersionInfo, err error) *MockVersionFetcher_GetLatestVersion_Call {
	_c.Call.Return(goVersionInfo, err)
	return _c
}

func (_c *MockVersionFetcher_GetLatestVersion_Call) RunAndReturn(run func() (*http.GoVersionInfo, error)) *MockVersionFetcher_GetLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}
