// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// ExecCommand defines the interface for executing commands.
type ExecCommand interface {
	Output() ([]byte, error)
	Path() string
	Args() []string
}

// NewMockCommandExecutor creates a new instance of MockCommandExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandExecutor {
	mock := &MockCommandExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommandExecutor is an autogenerated mock type for the CommandExecutor type
type MockCommandExecutor struct {
	mock.Mock
}

type MockCommandExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandExecutor) EXPECT() *MockCommandExecutor_Expecter {
	return &MockCommandExecutor_Expecter{mock: &_m.Mock}
}

// CommandContext provides a mock function for the type MockCommandExecutor
func (_mock *MockCommandExecutor) CommandContext(ctx context.Context, name string, arg ...string) ExecCommand {
	var tmpRet mock.Arguments
	if len(arg) > 0 {
		tmpRet = _mock.Called(ctx, name, arg)
	} else {
		tmpRet = _mock.Called(ctx, name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CommandContext")
	}

	var r0 ExecCommand
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) ExecCommand); ok {
		r0 = returnFunc(ctx, name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ExecCommand)
		}
	}
	return r0
}

// MockCommandExecutor_CommandContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandContext'
type MockCommandExecutor_CommandContext_Call struct {
	*mock.Call
}

// CommandContext is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - arg ...string
func (_e *MockCommandExecutor_Expecter) CommandContext(ctx interface{}, name interface{}, arg ...interface{}) *MockCommandExecutor_CommandContext_Call {
	return &MockCommandExecutor_CommandContext_Call{Call: _e.mock.On("CommandContext",
		append([]interface{}{ctx, name}, arg...)...)}
}

func (_c *MockCommandExecutor_CommandContext_Call) Run(run func(ctx context.Context, name string, arg ...string)) *MockCommandExecutor_CommandContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCommandExecutor_CommandContext_Call) Return(cmd ExecCommand) *MockCommandExecutor_CommandContext_Call {
	_c.Call.Return(cmd)
	return _c
}

func (_c *MockCommandExecutor_CommandContext_Call) RunAndReturn(run func(ctx context.Context, name string, arg ...string) ExecCommand) *MockCommandExecutor_CommandContext_Call {
	_c.Call.Return(run)
	return _c
}

// LookPath provides a mock function for the type MockCommandExecutor
func (_mock *MockCommandExecutor) LookPath(file string) (string, error) {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for LookPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(file)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommandExecutor_LookPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookPath'
type MockCommandExecutor_LookPath_Call struct {
	*mock.Call
}

// LookPath is a helper method to define mock.On call
//   - file string
func (_e *MockCommandExecutor_Expecter) LookPath(file interface{}) *MockCommandExecutor_LookPath_Call {
	return &MockCommandExecutor_LookPath_Call{Call: _e.mock.On("LookPath", file)}
}

func (_c *MockCommandExecutor_LookPath_Call) Run(run func(file string)) *MockCommandExecutor_LookPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommandExecutor_LookPath_Call) Return(s string, err error) *MockCommandExecutor_LookPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommandExecutor_LookPath_Call) RunAndReturn(run func(file string) (string, error)) *MockCommandExecutor_LookPath_Call {
	_c.Call.Return(run)
	return _c
}
