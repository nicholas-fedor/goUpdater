// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockloggerSetter creates a new instance of mockloggerSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockloggerSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockloggerSetter {
	mock := &mockloggerSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockloggerSetter is an autogenerated mock type for the loggerSetter type
type mockloggerSetter struct {
	mock.Mock
}

type mockloggerSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockloggerSetter) EXPECT() *mockloggerSetter_Expecter {
	return &mockloggerSetter_Expecter{mock: &_m.Mock}
}

// SetVerbose provides a mock function for the type mockloggerSetter
func (_mock *mockloggerSetter) SetVerbose(verbose bool) {
	_mock.Called(verbose)
	return
}

// mockloggerSetter_SetVerbose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVerbose'
type mockloggerSetter_SetVerbose_Call struct {
	*mock.Call
}

// SetVerbose is a helper method to define mock.On call
//   - verbose bool
func (_e *mockloggerSetter_Expecter) SetVerbose(verbose interface{}) *mockloggerSetter_SetVerbose_Call {
	return &mockloggerSetter_SetVerbose_Call{Call: _e.mock.On("SetVerbose", verbose)}
}

func (_c *mockloggerSetter_SetVerbose_Call) Run(run func(verbose bool)) *mockloggerSetter_SetVerbose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockloggerSetter_SetVerbose_Call) Return() *mockloggerSetter_SetVerbose_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockloggerSetter_SetVerbose_Call) RunAndReturn(run func(verbose bool)) *mockloggerSetter_SetVerbose_Call {
	_c.Run(run)
	return _c
}
