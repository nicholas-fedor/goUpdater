// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// newMockexecutor creates a new instance of mockexecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockexecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockexecutor {
	mock := &mockexecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockexecutor is an autogenerated mock type for the executor type
type mockexecutor struct {
	mock.Mock
}

type mockexecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockexecutor) EXPECT() *mockexecutor_Expecter {
	return &mockexecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mockexecutor
func (_mock *mockexecutor) Execute(cmd *cobra.Command) error {
	ret := _mock.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*cobra.Command) error); ok {
		r0 = returnFunc(cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockexecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockexecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - cmd *cobra.Command
func (_e *mockexecutor_Expecter) Execute(cmd interface{}) *mockexecutor_Execute_Call {
	return &mockexecutor_Execute_Call{Call: _e.mock.On("Execute", cmd)}
}

func (_c *mockexecutor_Execute_Call) Run(run func(cmd *cobra.Command)) *mockexecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cobra.Command
		if args[0] != nil {
			arg0 = args[0].(*cobra.Command)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockexecutor_Execute_Call) Return(err error) *mockexecutor_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockexecutor_Execute_Call) RunAndReturn(run func(cmd *cobra.Command) error) *mockexecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}
